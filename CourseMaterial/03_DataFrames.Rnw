\documentclass{article}
\input{c:/aaaWork/zGnrlLatex/GnrlPreamble}
\input{c:/aaaWork/zGnrlLatex/justRPreamble}
\hypersetup{pdftitle = Vermont 14 - Data Frames}

\begin{document}
  \titleRHO{Data Frames}{Vermont CFWRU Workshop}{Mar}

<<setup, echo=FALSE>>=
source("c:/aaaWork/zGnrlLatex/knitr_setup.R")
fn <- "03_DataFrames"
@

\section*{Load Necessary Packages}
<<results='hide', message=FALSE, warning=FALSE>>=
library(FSA)     # for Subset(), view(), lencat()
@

\section*{Reading External Data}
When beginning with R it is easiest to load external data with the following steps:
\begin{Enumerate}
  \item Enter data in an external software (e.g., spreadsheet or database) and save as a ``comma separated values'' (CSV) file.
  \item Start an initial script in RStudio.  Save this script to the \textbf{exact same folder} as the CSV file.
  \item Use the \textit{``Session''}, \textit{``Set Working Directory ...''}, \textit{``To Source File Location''} menu items to print the appropriate \R{setwd()} function to the \textit{Console} pane.
  \item Copy the appropriate \R{setwd()} function from the \textit{Console} pane to your script.
  \item Use \R{read.csv()} to load the external file into the R environment (described below).
  \item Use \R{str()}, \R{head()}, \R{view()}\footnote{This requires the \R{FSA} package.}, or view the file from the \textit{Environment} tab (upper-right pane of RStudio) to make sure the data appears proper.
\end{Enumerate}

<<>>=
setwd("C:/aaaWork/Web/fishR/courses/Vermont2014/CourseMaterial/") # Derek's computer only
d <- read.csv("Data/MNBCData.csv",header=TRUE)
str(d)
view(d)
nrow(d)
@

\vspace{24pt}
\section*{Subsets of the Data} 
<<>>=
d[5,]
d[c(5,11,17),]
d$age[1:25]
@

<<>>=
levels(d$species)
levels(d$lake)
@

<<>>=
dBLC <- Subset(d,species=="BLC")
xtabs(~species,data=dBLC)
dBLCTL <- Subset(d,species=="BLC" & lake=="Talcot")
xtabs(~species+lake,data=dBLCTL)
dBLCBLG <- Subset(d,species=="BLC" | species=="BLG")
xtabs(~species,data=dBLCBLG)
d2 <- Subset(d,species!="BLC")
xtabs(~species,data=d2)
dPred <- Subset(d,species %in% c("LMB","NOP","SMB","WAE"))
xtabs(~species,data=dPred)
dgt500 <- Subset(d,lencap>=500)
nrow(dgt500)
min(dgt500$lencap)
@


\section*{Adding Variables I}
\vspace{-18pt}
<<>>=
d$lenin <- d$lencap/25.4
d$loglen <- log(d$lencap)
view(d)
# Create a year factor (categorical) variable
d$fyearcap <- factor(d$yearcap)
str(d)
levels(d$fyearcap)
@

<<>>=
# Create a length categorization variable
d <- lencat(~lencap,data=d,startcat=75,w=25)
view(d)
xtabs(~species+LCat,data=d)
@


\clearpage
\section*{Back-Calculation Example}
<<>>=
# Focus hereafter on Talcot Lake Black Crappie in 2006 (only year sampled)
#   and eliminate several variables not used (for illustration & simplicity)
dBLC <- Subset(d,species=="BLC" & lake=="Talcot" & yearcap==2006,
               select=-c(gear,yearcap,lenin,loglen,fyearcap,LCat))
levels(dBLC$species)
levels(dBLC$lake)
@

\vspace{30pt}
\subsection*{Reshaping}
Some definitions:
\begin{Itemize}
  \item \textit{``Wide'' Data} -- Rows contains repeated measurements on same individuals.  This is currently the cases ... each row has multiple scale radii measurements for the same fish in the \R{anuX} variables.
  \item \textit{``Long'' Data} -- Each row contains only one measurement from an individual.  Thus, multiple measurements on the same fish will be in multiple rows.
\end{Itemize}

The \R{reshape()} function can be used to change the shape of a data frame from wide to long, or vice versa.  Within this function several items have to be defined when moving from ``wide'' to ``long'' format.
\begin{Itemize}
  \item \R{idvar} -- The single variable name that identifies an individual (a fish in this case).
  \item \R{varying} -- A vector of names for the variables that contain the repeated measurements (i.e., the variables names containing the scale radius measurements). 
  \item \R{v.names} -- A single name for repeated measurements variable in the long format.  This will usually be very closely related to the common portion of the names in \R{varying}.
  \item \R{timevar} -- A single name for the labels for the repeated measurements values in the long format.  This is likely a descriptive name for specific portion of the names in \R{varying}.
  \item \R{times} -- A vector of values for the repeated measurements in the long format (i.e., the ages corresponding to the radial measurements in this case).
\end{Itemize}

<<>>=
# list the variables that contain the repeated measurements
varying1 <- c("anu1","anu2","anu3","anu4","anu5","anu6",
              "anu7","anu8","anu9","anu10","anu11","anu12")
# this is an alternative to the above that eliminates repetitive typing
( varying2 <- which(grepl("anu",names(dBLC))) )

# do the reshaping
ldBLC <- reshape(dBLC,direction="long",
                 idvar="fish",         # what identifies unique fish
                 varying=varying1,     # declare the repeated measurements
                 v.names="anu",        # name for repeat meas in long format
                 timevar="age",        # name of var that identifies the repeat
                 times=1:12)           # values in timevar for repeat

view(ldBLC)

ldBLC[ldBLC$fish==165,]                # example for one fish

# remove all of the NAs
ldBLC <- Subset(ldBLC,!is.na(anu))
ldBLC[ldBLC$fish==165,]                # same example for one fish

# remove the "plus" growth
ldBLC <- Subset(ldBLC,agecap-age>=0)
ldBLC[ldBLC$fish==165,]                # same example for one fish
@

\clearpage
\subsection*{Adding Variables II}
<<>>=
k <- 35  # use Carlander intercept of k=35 mm
ldBLC <- within(ldBLC, {
  bcFL <- (anu/radcap)*(lencap-k)+k
})
view(ldBLC)
Summarize(bcFL~age,data=ldBLC)
@

<<echo=FALSE, results='hide', message=FALSE, error=FALSE>>=
swvCode(fn,out.dir="Scripts",moreItems=c("source","fn"))
@

\end{document}